#!/bin/bash
# Pull app APK and files from remote device running a rooted SSHd
# Assumes that 'ssh root@android' already works via SSH key/config
# Uses ADB instead of SSH is run as 'androidpullapp adb'

# Get first arg option
arg=$1
if [[ $arg == adb ]]; then
    comm='adb shell'
    pull='adb pull '
    all_syntax='.'
    adb root
else
    comm='ssh root@android'
    pull='scp -r root@android:'
    all_syntax='*'
fi

# List installed third party packages
echo "The following packages are installed: "
$comm pm list packages -3 | cut -d':' -f2

# Get package_name from argument
read -p "Enter the package name to pull: " package_name

# Get installed package version from remote
package_version=$($comm dumpsys package $package_name | grep versionCode | cut -d'=' -f2 | cut -d' ' -f1)

# Get path to APK from remote
remote_apk_path=$($comm pm path $package_name | cut -d':' -f2)

# Copy APK from remote
echo "Pulling $package_name versionCode $package_version APK..."
mkdir -p $package_name-$package_version/
$pull$remote_apk_path $package_name-$package_version/$package_name-$package_version.apk

# Copy app files from remote
echo "Pulling /data/user/0/$package_name/ files..."
mkdir -p $package_name-$package_version/files/
$pull/data/user/0/$package_name/$all_syntax $package_name-$package_version/files/

# Get app UID from remote
app_uid=$($comm stat -c '%U' /data/user/0/$package_name/ | cut -d'a' -f2)

# Get Keystore files associated with UID
echo "Pulling $package_name /data/misc/keystore/user_0/10$app_uid* keystore files..."
mkdir -p $package_name-$package_version/keystore/
$pull/data/misc/keystore/user_0/10$app_uid* $package_name-$package_version/keystore/
